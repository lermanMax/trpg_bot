from poll_module import Defense_question, get_text_from, DB


type_of_attack = Defense_question(
    'd_type_of_attack', 
    get_text_from('./questions_text/type_of_attack_for_defense.txt'),
    field_name = 'type_of_attack')


type_of_defense_1 = Defense_question(
    'type_of_defense_1', 
    get_text_from('./questions_text/type_of_defense.txt'), 
    field_name = 'type_of_defense')

type_of_defense_2 = Defense_question(
    'type_of_defense_2', 
    get_text_from('./questions_text/type_of_defense_2.txt'), 
    field_name = 'type_of_defense')

attack_weapon = Defense_question(
    'attack_weapon', 
    get_text_from('./questions_text/attack_weapon.txt'))
attack_weapon.add_options_dict(
    {'–ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω': None,
     '–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç': None})

type_of_defense_3 = Defense_question(
    'type_of_defense_3', 
    get_text_from('./questions_text/type_of_defense_3.txt'), 
    field_name = 'type_of_defense')


defense_weapon_1 = Defense_question(
    'defense_weapon', 
    get_text_from('./questions_text/defense_weapon.txt'), 
    field_name = 'defense_weapon')
defense_weapon_1.add_options_dict(
    {'–©–∏—Ç': None,
     '–ú–µ—á':None,
     '–õ–µ–≥–∫–∏–π –∫–ª–∏–Ω–æ–∫':None,
     '–î—Ä–µ–≤–∫–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ':None,
     '–†—É–∫–∞/–ù–æ–≥–∞':None})

defense_weapon_2 = Defense_question(
    'defense_weapon', 
    get_text_from('./questions_text/defense_weapon.txt'), 
    field_name = 'defense_weapon',
    column_name = 'type_of_attack', 
    required_value = '–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è')
defense_weapon_2.add_options_dict(
    {'–©–∏—Ç': None })

defense_weapon_3 = Defense_question(
    'defense_weapon', 
    get_text_from('./questions_text/defense_weapon.txt'), 
    field_name = 'defense_weapon')
defense_weapon_3.add_options_dict(
    {'–©–∏—Ç': None,
     '–ú–µ—á':None,
     '–õ–µ–≥–∫–∏–π –∫–ª–∏–Ω–æ–∫':None,
     '–î—Ä–µ–≤–∫–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ':None,
     '–†—É–∫–∞/–ù–æ–≥–∞':None})


opponents = Defense_question(
    'opponents', 
    get_text_from('./questions_text/opponents.txt'), 
    field_name = 'opponents')
opponents.add_options_dict(
    {'-5 [ 6 —à—Ç.]': None,
     '-4 [ 5 —à—Ç.]':None,
     '-3 [ 4 —à—Ç.]':None,
     '-2 [ 3 —à—Ç.]':None,
     '-1 [ 2 —à—Ç.]':None,
     '-0 [0 –∏–ª–∏ 1 —à—Ç.]':None})


d_mod = Defense_question(
    'd_mod', 
    get_text_from('./questions_text/mod.txt'), 
    keyboard_type = Defense_question.multiple_answer)
d_mod.add_options_dict(
    {'-2 –Ø —Å–±–∏—Ç(–∞) —Å –Ω–æ–≥':None,
     '+1  –î—Ä—É–≥–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä':None,
     '+2  –î—Ä—É–≥–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä':None,
     '+3  –î—Ä—É–≥–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä':None,
     '-1  –î—Ä—É–≥–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä':None,
     '-2  –î—Ä—É–≥–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä':None })

defense_failed = Defense_question(
    'defense_failed', 
    get_text_from('./questions_text/defense_failed.txt'))

def text_for_is_attack_more(session_id):
    session = DB.get_defense_session(session_id)
    
    skill_dict = {
        '–ú–µ—á': '–í–ª–∞–¥–µ–Ω–∏–µ –º–µ—á–æ–º',
        '–õ–µ–≥–∫–∏–π –∫–ª–∏–Ω–æ–∫': '–í–ª–∞–¥–µ–Ω–∏–µ –ª–µ–≥–∫–∏–º–∏ –∫–ª–∏–Ω–∫–∞–º–∏',
        '–î—Ä–µ–≤–∫–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ': '–í–ª–∞–¥–µ–Ω–∏–µ –¥—Ä–µ–≤–∫–æ–≤—ã–º –æ—Ä—É–∂–∏–µ–º',
        '–©–∏—Ç': '–ë–ª–∏–∂–Ω–∏–π –±–æ–π',
        '–†—É–∫–∞/–ù–æ–≥–∞': '–ë–æ—Ä—å–±–∞' }
    
    type_of_defense = session['type_of_defense'][3:] 
    if type_of_defense == '–£–∫–ª–æ–Ω–µ–Ω–∏–µ/–ò–∑–≤–æ—Ä–æ—Ç':
        parameter = '–†–µ–∞–∫—Ü–∏—è'
        defense_weapon =''
        skill = '–£–∫–ª–æ–Ω–µ–Ω–∏–µ/–ò–∑–≤–æ—Ä–æ—Ç–ª–∏–≤–æ—Å—Ç—å'
    elif (type_of_defense == '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏'
          or type_of_defense == '–£–∫–ª–æ–Ω.[–ê—Ç–ª–µ—Ç–∏–∫–∞]'):
        parameter = '–õ–æ–≤–∫–æ—Å—Ç—å'
        defense_weapon = ''
        skill = '–ê—Ç–ª–µ—Ç–∏–∫–∞'
    elif type_of_defense == '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –º–∞–≥–∏–∏':
        parameter = '–í–æ–ª—è'
        defense_weapon =''
        skill = '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –º–∞–≥–∏–∏'
    else:
        parameter = '–†–µ–∞–∫—Ü–∏—è'
        weapon = session['defense_weapon']
        defense_weapon = f'‚Ñπ –í–∞—à–µ –æ—Ä—É–¥–∏–µ –∑–∞—â–∏—Ç—ã: {weapon}'
        skill = skill_dict[weapon]
    
    opponents = session['opponents']
    modifier = int(opponents.split(' ')[0])
    
    list_of_modifiers = [] 
    
    list_of_modifiers.append(session['type_of_defense'])
    
    list_of_mod_rows = DB.get_selected_options_from_defense(session_id, 'd_mod')
    if list_of_mod_rows:
        for row in list_of_mod_rows:
            list_of_modifiers.append(row['value'])
    
    modifier_names = '\n'.join(list_of_modifiers)
    
    for item in list_of_modifiers:
        number = item.split(' ')[0]
        modifier += int(number)
    
    if modifier >= 0: plus = '+'
    else: plus = ''
    
    text = f'''
{defense_weapon}
‚Ñπ –°–ø–æ—Å–æ–± –∑–∞—â–∏—Ç—ã: {type_of_defense}
    
‚Ñπ –í—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:
{opponents} –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ —Ä—è–¥–æ–º  
{modifier_names}
‚Ñπ –°—É–º–º–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤: {plus}{modifier}

‚û° <b>–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∑–∞—â–∏—Ç—É –ø–æ —Ñ–æ—Ä–º—É–ª–µ:</b>
–ë—Ä–æ—Å–æ–∫ D10 
+ {parameter} 
+ –ù–∞–≤—ã–∫: {skill}
{plus}{modifier}

üí¨ –ù–∞–∑–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—à–µ–π –∑–∞—â–∏—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É 
‚û° <b>–ê—Ç–∞–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –±–æ–ª—å—à–µ  –≤–∞—à–µ–π –∑–∞—â–∏—Ç—ã?</b> –ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞ —Å–∫–æ–ª—å–∫–æ?
    '''
    return text

is_attack_more_1 = Defense_question(
    'd_is_attack_more_1', 
    text = text_for_is_attack_more,
    column_name = 'attack_weapon', 
    required_value = '–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç',
    field_name='is_attack_more')

is_attack_more = Defense_question(
    'd_is_attack_more', 
    text = text_for_is_attack_more,
    field_name='is_attack_more')


def text_for_attack_failed(session_id):
    session = DB.get_defense_session(session_id)
    
    type_of_defense = session['type_of_defense'] 
    if type_of_defense == '+0 –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ':
        text = 'üõ° –í—ã –æ—Ç—Ä–∞–∑–∏–ª–∏ –∞—Ç–∞–∫—É.\n\n‚û° –û—Ä—É–¥–∏–µ, –∫–æ—Ç–æ—Ä—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç—Ä–∞–∑–∏–ª –∞—Ç–∞–∫—É –ø–æ–ª—É—á–∞–µ—Ç 1 —É—Ä–æ–Ω'
    elif type_of_defense in ['-3 –ü–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ','-5 –ü–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ']:
        text = 'üõ° –í—ã –æ—Ç—Ä–∞–∑–∏–ª–∏ –∞—Ç–∞–∫—É.\nüí¨ –í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –û—à–µ–ª–æ–º–ª–µ–Ω'
    else:
        text = 'üõ° –í—ã –æ—Ç—Ä–∞–∑–∏–ª–∏ –∞—Ç–∞–∫—É'
    return text

attack_failed = Defense_question(
    'd_attack_fail', 
    text = text_for_attack_failed)


place = Defense_question(
    'd_place', 
    get_text_from('./questions_text/place_for_defense.txt'),
    field_name='place' )
place.add_options_dict(
    {'–ì–æ–ª–æ–≤–∞':None,
     '–¢—É–ª–æ–≤–∏—â–µ':None,
     '–†—É–∫–∞':None,
     '–ù–æ–≥–∞':None})


def text_for_armor(session_id):
    session = DB.get_defense_session(session_id)
    place_dict = {'–ì–æ–ª–æ–≤–∞': '–≥–æ–ª–æ–≤–µ',
                  '–¢—É–ª–æ–≤–∏—â–µ': '—Ç—É–ª–æ–≤–∏—â–µ',
                  '–†—É–∫–∞':'—Ç—É–ª–æ–≤–∏—â–µ (—Ä—É–∫–∞)',
                  '–ù–æ–≥–∞':'–Ω–æ–≥–∞—Ö'}
    place = session['place'] 
    place_word = place_dict[place]
    
    text = f'''
‚û° –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—á–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –±—Ä–æ–Ω–∏ –Ω–∞ {place_word}
    '''
    return text

armor = Defense_question(
    'armor', 
    text=text_for_armor,
    field_name='armor',
    keyboard_type = Defense_question.numerical_answer)


def skript_for_damage_hit(session_id):
    session = DB.get_defense_session(session_id)
    additional_damage_dict = {
        '–î–∞': 0,
        '–î–∞, –Ω–∞ 7-9':3,
        '–î–∞, –Ω–∞ 10-12':5,
        '–î–∞, –Ω–∞ 13-14':8,
        '–î–∞, –Ω–∞ 15 –∏–ª–∏ –±–æ–ª—å—à–µ':10}
    additional_damage = additional_damage_dict[session['is_attack_more']]
    damage_hit = session['damage_hit']
    armor = session['armor']
    answer = max(damage_hit - additional_damage - armor, 0)+ additional_damage
    
    DB.save_defense(session_id, 'damage_pierced', answer)
    
damage_hit = Defense_question(
    'd_damage_hit', 
    text=get_text_from('./questions_text/damage_hit_for_defence.txt'),
    field_name='damage_hit',
    keyboard_type = Defense_question.numerical_answer,
    skript=skript_for_damage_hit )


damage_failed = Defense_question(
    'damage_failed', 
    text=get_text_from('./questions_text/damage_failed_for_defense.txt'),
    column_name = 'damage_pierced', 
    required_value = 0)


resistance_or = Defense_question(
    'd_resistance_or', 
    get_text_from('./questions_text/resistance_or_for_defense.txt'),
    field_name='resistance_or' )
resistance_or.add_options_dict(
    {'—Ö1/2 –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ':None,
     '—Ö2 –í–æ—Å–ø—Ä–∏–∏–º—á–∏–≤–æ—Å—Ç—å':None,
     '–ù–µ—Ç':None})


def text_for_damage_hurt(session_id):
    session = DB.get_defense_session(session_id)
    
    place_dict = {
        '–ì–æ–ª–æ–≤–∞': '–≥–æ–ª–æ–≤–µ',
        '–¢—É–ª–æ–≤–∏—â–µ': '—Ç—É–ª–æ–≤–∏—â–µ',
        '–†—É–∫–∞':'—Ç—É–ª–æ–≤–∏—â–µ',
        '–ù–æ–≥–∞':'–Ω–æ–≥–∞—Ö'}
    place = session['place'] 
    place_word = place_dict[place]
    armor = session['armor']
    
    additional_damage_dict = {
        '–î–∞': 0,
        '–î–∞, –Ω–∞ 7-9':3,
        '–î–∞, –Ω–∞ 10-12':5,
        '–î–∞, –Ω–∞ 13-14':8,
        '–î–∞, –Ω–∞ 15 –∏–ª–∏ –±–æ–ª—å—à–µ':10}
    additional_damage = additional_damage_dict[session['is_attack_more']]
    damage_hit = session['damage_hit']
    armor = session['armor']
    damage_pierced = session['damage_pierced'] 
    
    modifier_place_dict = {
        '–ì–æ–ª–æ–≤–∞': 3,
        '–¢—É–ª–æ–≤–∏—â–µ': 1,
        '–†—É–∫–∞': 0.5,
        '–ù–æ–≥–∞': 0.5}
    
    modifier_place = modifier_place_dict[place]
    
    resistance_or_dict = {
        '—Ö1/2 –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ': 0.5,
        '—Ö2 –í–æ—Å–ø—Ä–∏–∏–º—á–∏–≤–æ—Å—Ç—å': 2,
        '–ù–µ—Ç': 1}
    resistance_or_field = session['resistance_or']
    modifier_resistance_or = resistance_or_dict[resistance_or_field]
    if resistance_or_field != '–ù–µ—Ç':
        text_modifier_resistance_or = f"{resistance_or_field.split(' ')[1]}: {resistance_or_field.split(' ')[0]}"
    else:
        text_modifier_resistance_or = ''
    
    result_damage = damage_pierced*modifier_place*modifier_resistance_or
    
    is_attack_more_fielde = session['is_attack_more']
    if is_attack_more_fielde != '–î–∞':
        attack_more_defense = is_attack_more_fielde[6:]
        
        critical_level_dict = {
            '–î–∞, –Ω–∞ 7-9': '–õ–µ–≥–∫–∏–π',
            '–î–∞, –Ω–∞ 10-12': '–°—Ä–µ–¥–Ω–∏–π',
            '–î–∞, –Ω–∞ 13-14': '–¢—è–∂–µ–ª—ã–π',
            '–î–∞, –Ω–∞ 15 –∏–ª–∏ –±–æ–ª—å—à–µ':'–°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π'}
        critical_level = critical_level_dict[is_attack_more_fielde]
        
        crit = f'''
        
‚Ñπ –ê—Ç–∞–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞—â–∏—Ç—É –Ω–∞: {attack_more_defense}
‚Ñπ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: {critical_level}
    
        '''
        hurt = '\n‚û° –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–Ω–µ–Ω–∏–µ(—Å—Ç—Ä.158)'
    else: 
        crit = ''
        hurt = ''
    
    text = f'''
‚Ñπ –ú–µ—Å—Ç–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è: {place}

‚Ñπ –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞:
–ò—Å—Ö–æ–¥–Ω—ã–π —É—Ä–æ–Ω: {damage_hit - additional_damage} + {additional_damage}–¥–æ–ø.—É—Ä–æ–Ω–∞
–ü—Ä–æ—á–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏ –Ω–∞ {place_word}: {armor}
–£—Ä–æ–Ω–∞ –ø—Ä–µ–æ–¥–æ–ª–µ–ª–æ –±—Ä–æ–Ω—é: {damage_pierced}
–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Å—Ç–∞: x{modifier_place}
{text_modifier_resistance_or} 
‚Ñπ –ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: {result_damage}
{crit}
‚û° <b>–£—á—Ç–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω</b> {hurt} 
‚û° –°–Ω–∏–∑—å—Ç–µ –ø—Ä–æ—á–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏ –Ω–∞ 1. 
    '''
    return text

        
damage_hurt = Defense_question(
    'damage_hurt', 
    text=text_for_damage_hurt,
    field_name='damage_hurt')


# critical_injury varchar(80)


'''Defense tree----------------------------------------------------------------------------'''

type_of_attack.add_options_dict(
    {'–ë–ª–∏–∂–Ω–∏–π –±–æ–π': type_of_defense_1, 
     '–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è': type_of_defense_2,
     '–ú–∞–≥–∏—è': attack_weapon})

attack_weapon.next_question = type_of_defense_3

type_of_defense_1.add_options_dict(
    {'+0 –£–∫–ª–æ–Ω–µ–Ω–∏–µ/–ò–∑–≤–æ—Ä–æ—Ç': opponents,
     '+0 –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏': opponents,
     '+0 –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ': defense_weapon_2,
     '-3 –ü–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ': defense_weapon_1})

type_of_defense_2.add_options_dict(
    {'+0 –£–∫–ª–æ–Ω–µ–Ω–∏–µ/–ò–∑–≤–æ—Ä–æ—Ç': opponents,
     '+0 –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏':opponents,
     '+0 –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ':defense_weapon_2,
     '-5 –ü–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ':defense_weapon_1})

type_of_defense_3.add_options_dict(
    {'+0 –£–∫–ª–æ–Ω–µ–Ω–∏–µ/–ò–∑–≤–æ—Ä–æ—Ç': opponents,
     '+0 –£–∫–ª–æ–Ω.[–ê—Ç–ª–µ—Ç–∏–∫–∞]':opponents,
     '+0 –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ':defense_weapon_2,
     '–ù–µ—Ç –∑–∞—â–∏—Ç—ã': defense_failed})


defense_weapon_1.next_question = opponents
defense_weapon_2.next_question = defense_weapon_3
defense_weapon_3.next_question = opponents

opponents.next_question = d_mod

d_mod.next_question = is_attack_more_1

is_attack_more_1.next_question = is_attack_more
is_attack_more_1.add_options_dict(
    {'–ù–µ—Ç': attack_failed,
     '–î–∞': defense_failed})

is_attack_more.add_options_dict(
    {'–ù–µ—Ç': attack_failed,
     '–î–∞': place,
     '–î–∞, –Ω–∞ 7-9': place,
     '–î–∞, –Ω–∞ 10-12': place,
     '–î–∞, –Ω–∞ 13-14': place,
     '–î–∞, –Ω–∞ 15 –∏–ª–∏ –±–æ–ª—å—à–µ': place})

place.next_question = armor

armor.next_question = damage_hit

damage_hit.next_question = damage_failed

damage_failed.next_question = resistance_or

resistance_or.next_question = damage_hurt
