from poll_module import Attack_question, get_text_from, DB


'''Attack '''

type_of_attack = Attack_question('type_of_attack', 
                                 get_text_from('./questions_text/type_of_attack.txt'))


melee_weapon = Attack_question('melee_weapon', 
                                get_text_from('./questions_text/melee_weapon.txt'), 
                                keyboard_type = Attack_question.one_answer, 
                                options_dict = None, 
                                column_name = None, 
                                required_value = None,
                                next_question=None)
melee_weapon.add_options_dict({'–ú–µ—á': None,
                               '–õ–µ–≥–∫–∏–π –∫–ª–∏–Ω–æ–∫': None,
                               '–î—Ä–µ–≤–∫–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ': None,
                               '–©–∏—Ç': None,
                               '–†—É–∫–∞/–ù–æ–≥–∞': None})


ranged_weapon = Attack_question('ranged_weapon', 
                                get_text_from('./questions_text/ranged_weapon.txt'))



fast_or_hard_1 = Attack_question('fast_or_hard_1', 
                                 get_text_from('./questions_text/fast_or_hard.txt'))
fast_or_hard_1.add_options_dict({'+0 –ë—ã—Å—Ç—Ä–æ [2 –∞—Ç–∞–∫–∏]': None,
                                 '-3 –°–∏–ª—å–Ω–æ': None})
  
fast_or_hard_2 = Attack_question('fast_or_hard_2', 
                                get_text_from('./questions_text/fast_or_hard.txt'))
fast_or_hard_2.add_options_dict({'+0 –û–±—ã—á–Ω–æ [1 –∞—Ç–∞–∫–∞]': None,
                                '-3 –°–∏–ª—å–Ω–æ': None})

fast_or_hard_3 = Attack_question('fast_or_hard_3', 
                                get_text_from('./questions_text/fast_or_hard.txt'))
fast_or_hard_3.add_options_dict({'+0 –û–±—ã—á–Ω–æ [1 –∞—Ç–∞–∫–∞]': None})


place_penalty = Attack_question('place_penalty', 
                                get_text_from('./questions_text/place_penalty.txt'))
place_penalty.add_options_dict({'-6 –ì–æ–ª–æ–≤–∞': None,
                                '-1 –¢—É–ª–æ–≤–∏—â–µ': None,
                                '-3 –†—É–∫–∞/–ö–æ–Ω–µ—á–Ω–æ—Å—Ç—å': None,
                                '-2 –ù–æ–≥–∞/–ö—Ä—ã–ª–æ/–•–≤–æ—Å—Ç': None,
                                '+0 –°–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ': None})


distance = Attack_question('distance', 
                           get_text_from('./questions_text/distance.txt'),
                           column_name = 'type_of_attack', 
                           required_value = '–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è')
distance.add_options_dict({'+5 –í —É–ø–æ—Ä [<0.5 –º–µ—Ç—Ä–∞]': None,
                           '+0 –ë–ª–∏–∑–∫–∞—è [1/4 –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏]': None,
                           '-2 –°—Ä–µ–¥–Ω—è—è [1/2 –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏]': None,
                           '-4 –î–∞–ª—å–Ω—è—è [1—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏—è]': None,
                           '-6 –≠–∫—Å—Ç—Ä–µ–º. [2—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏—è]': None})



mod = Attack_question('mod', 
                      get_text_from('./questions_text/mod.txt'), 
                      keyboard_type = Attack_question.multiple_answer)
mod.add_options_dict({'+3  –Ø –≤–Ω–µ –∫–æ–Ω—É—Å–∞ –∑—Ä–µ–Ω–∏—è –¶':None,
                      '-3 –¶ –≤–Ω–µ –º–æ–µ–≥–æ –∫–æ–Ω—É—Å–∞ –∑—Ä–µ–Ω–∏—è':None,
                      '+4  –¶ –æ–±–µ–∑–¥–≤–∏–∂–µ–Ω–∞':None,
                      '-2  –¶ —É–∫–ª–æ–Ω—è–µ—Ç—Å—è':None,
                      '-3  –¶ –¥–≤–∏–∂–µ—Ç—Å—è, –µ–µ –†–µ–∞>10':None,
                      '-3  –ë—ã—Å—Ç—Ä–æ–µ –≤—ã—Ö–≤–∞—Ç—ã–≤–∞–Ω–∏–µ':None,
                      '+5  –ó–∞—Å–∞–¥–∞':None,
                      '-5  –†–∏–∫–æ—à–µ—Ç':None,
                      '-2  –Ø —Å–±–∏—Ç(–∞) —Å –Ω–æ–≥':None,
                      '-3  –û—Å–ª–µ–ø–ª–µ–Ω(–∞) —Å–≤–µ—Ç–æ–º/–ø—ã–ª—å—é':None,
                      '-2  –¢–µ–º–Ω–æ—Ç–∞':None,
                      '+2  –¶ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–º —Ñ–æ–Ω–µ':None,
                      '-3 –≠—Ç–æ –¥–æ–ø. –¥–µ–π—Å—Ç–≤–∏–µ':None,
                      '+1  –î—Ä—É–≥–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä':None,
                      '+2  –î—Ä—É–≥–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä':None,
                      '+3  –î—Ä—É–≥–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä':None
                      })



weapon_accuracy = Attack_question('weapon_accuracy', 
                                  get_text_from('./questions_text/weapon_accuracy.txt'))
weapon_accuracy.add_options_dict({'+5': None,
                                  '+4': None,
                                  '+3': None,
                                  '+2': None,
                                  '+1': None,
                                  '+0': None})


effects = Attack_question('effects', 
                          get_text_from('./questions_text/effects.txt'), 
                          keyboard_type = Attack_question.multiple_answer)
effects.add_options_dict({'-1 –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏–µ':None,
                          '-2 –û—à–µ–ª–æ–º–ª–µ–Ω–∏–µ':None,
                          '-2 –û–ø—å—è–Ω–µ–Ω–∏–µ':None,
                          '-3 –°–ª–µ–ø–æ—Ç–∞':None})


def text_for_attack_more(session_id):
    
    session = DB.get_attack_session(session_id)
    
    skill_dict = {'–ú–µ—á': '–í–ª–∞–¥–µ–Ω–∏–µ –º–µ—á–æ–º',
                  '–õ–µ–≥–∫–∏–π –∫–ª–∏–Ω–æ–∫': '–í–ª–∞–¥–µ–Ω–∏–µ –ª–µ–≥–∫–∏–º–∏ –∫–ª–∏–Ω–∫–∞–º–∏',
                  '–î—Ä–µ–≤–∫–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ': '–í–ª–∞–¥–µ–Ω–∏–µ –¥—Ä–µ–≤–∫–æ–≤—ã–º –æ—Ä—É–∂–∏–µ–º',
                  '–©–∏—Ç': '–ë–ª–∏–∂–Ω–∏–π –±–æ–π',
                  '–†—É–∫–∞/–ù–æ–≥–∞': '–ë–æ—Ä—å–±–∞',
                  '–ú–µ—Ç–∞—Ç–µ–ª—å–Ω–æ–µ': '–ê—Ç–ª–µ—Ç–∏–∫–∞',
                  '–õ—É–∫': '–°—Ç—Ä–µ–ª—å–±–∞ –∏–∑ –ª—É–∫–∞',
                  '–ê—Ä–±–∞–ª–µ—Ç': '–°—Ç—Ä–µ–ª—å–±–∞ –∏–∑ –∞—Ä–±–∞–ª–µ—Ç–∞'}
    
    if session['type_of_attack'] == '–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è':
        parameter = '–õ–æ–≤–∫–æ—Å—Ç—å'
        weapon = session['ranged_weapon']
        skill = skill_dict[weapon]
    else:
        parameter = '–†–µ–∞–∫—Ü–∏—è'
        weapon = session['melee_weapon']
        skill = skill_dict[weapon]
    
    accuracy = session['weapon_accuracy']
    
    modifier = int(accuracy)
    list_of_modifiers = []
    
    if (session['fast_or_hard_1'] == '-3 –°–∏–ª—å–Ω–æ' 
        or session['fast_or_hard_2'] == '-3 –°–∏–ª—å–Ω–æ'):
        list_of_modifiers.append('-3 –°–∏–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞')
    
    list_of_modifiers.append(session['place_penalty'])
    
    if session['distance']: list_of_modifiers.append(session['distance'])
    
    list_of_mod_rows = DB.get_selected_options_from_attack(session_id, 'mod')
    if list_of_mod_rows:
        for row in list_of_mod_rows:
            list_of_modifiers.append(row['value'])
    
    list_of_effects_rows = DB.get_selected_options_from_attack(session_id, 'effects')
    if list_of_effects_rows:
        for row in list_of_effects_rows:
            list_of_modifiers.append(row['value'])
    
    modifier_names = '\n'.join(list_of_modifiers)
    
    for item in list_of_modifiers:
        number = item.split(' ')[0]
        modifier += int(number)
    
    if modifier >= 0: plus = '+'
    else: plus = '' 
    text = f'''
‚Ñπ –í–∞—à–µ –æ—Ä—É–∂–∏–µ –∞—Ç–∞–∫–∏: {weapon}
    
‚Ñπ –í—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:
{accuracy} –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ä—É–∂–∏—è  
{modifier_names}
‚Ñπ –°—É–º–º–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ = {plus}{modifier}

‚û° –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∞—Ç–∞–∫—É –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
–ë—Ä–æ—Å–æ–∫ D10 
+ {parameter} 
+ –ù–∞–≤—ã–∫: {skill}
{plus}{modifier}

üí¨ –ù–∞–∑–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—à–µ–π –∞—Ç–∞–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É 
‚û° –í–∞—à–∞ –∞—Ç–∞–∫–∞ –±–æ–ª—å—à–µ –∑–∞—â–∏—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞?
    '''
    return text


is_attack_more = Attack_question('is_attack_more', 
                                  text = text_for_attack_more)

attack_failed = Attack_question(
    'attack_failed', 
    get_text_from('./questions_text/attack_failed.txt'))

body = Attack_question('body',
                       get_text_from('./questions_text/body.txt'))
body.add_options_dict({'-4 [–¢–µ–ª. 1-2]': None,
                       '-2 [–¢–µ–ª. 3-4]': None,
                       '+0 [–¢–µ–ª. 5-6]': None,
                       '+2 [–¢–µ–ª. 7-8]': None,
                       '+4 [–¢–µ–ª. 9-10]': None,
                       '+6 [–¢–µ–ª. 11-12]': None,
                       '+8 [–¢–µ–ª. 13-20]': None})


weapon_damage = Attack_question(
    'weapon_damage', 
    get_text_from('./questions_text/weapon_damage.txt'), 
    keyboard_type = Attack_question.numerical_answer)


enemy_type = Attack_question('enemy_type', 
                             get_text_from('./questions_text/enemy_type.txt'),
                             column_name = 'place_penalty', 
                             required_value = '+0 –°–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ')

place_humanoid = Attack_question('place_humanoid', 
                                 get_text_from('./questions_text/place_humanoid.txt'))
place_humanoid.add_options_dict({'1 –ì–æ–ª–æ–≤–∞': None,
                                 '2-4 –¢—É–ª–æ–≤–∏—â–µ': None,
                                 '5 –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞': None,
                                 '6 –õ–µ–≤–∞—è —Ä—É–∫–∞': None,
                                 '7-8 –ü—Ä–∞–≤–∞—è –Ω–æ–≥–∞ ': None,
                                 '9-10 –õ–µ–≤–∞—è –Ω–æ–≥–∞': None})


place_monster = Attack_question('place_monster', 
                                get_text_from('./questions_text/place_monster.txt'))
place_monster.add_options_dict({'1 –ì–æ–ª–æ–≤–∞': None,
                                '2-5 –¢—É–ª–æ–≤–∏—â–µ': None,
                                '6-7 –ü—Ä–∞–≤–∞—è –∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å': None,
                                '8-9 –õ–µ–≤–∞—è –∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å': None,
                                '10 –•–≤–æ—Å—Ç/–∫—Ä—ã–ª–æ': None})


def text_for_damage_more(session_id):
    session = DB.get_attack_session(session_id)
    
    additional_damage_dict = {'–î–∞': 0,
                              '–î–∞, –Ω–∞ 7-9':3,
                              '–î–∞, –Ω–∞ 10-12':5,
                              '–î–∞, –Ω–∞ 13-14':8,
                              '–î–∞, –Ω–∞ 15 –∏–ª–∏ –±–æ–ª—å—à–µ':10}
    
    if session['type_of_attack'] == '–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è':
        weapon = session['ranged_weapon']
    else:
        weapon = session['melee_weapon']
    
    if session['place_penalty'] == '+0 –°–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ':
        if session['place_humanoid']:
            place_list = session['place_humanoid'].split(' ')[1:]
        else:
            place_list = session['place_monster'].split(' ')[1:]
    else:
        place_list = session['place_penalty'].split(' ')[1:]
        
    place = ' '.join(place_list)
    
    weapon_damage = session['weapon_damage']
    result_damage = weapon_damage
    
    if session['fast_or_hard_1'] != None:
        body_damage = session['body'].split(' ')[0]
        result_damage += int(body_damage)
        plus_body = f'–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {body_damage}\n' 
    else:
        plus_body = ''
    
    if (session['fast_or_hard_1'] == '-3 –°–∏–ª—å–Ω–æ' 
        or session['fast_or_hard_2'] == '-3 –°–∏–ª—å–Ω–æ'):
        result_damage = result_damage * 2
        x_strong_attack = '–°–∏–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞: –£—Ä–æ–Ω —Ö2 \n'
    else:
        x_strong_attack = ''
    
    additional_damage = additional_damage_dict[session['is_attack_more']]
    if additional_damage != 0:
        result_damage += additional_damage
        plus_additional_damage = f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–Ω: {additional_damage}\n'
        comment_additional_damage = '(–î–æ–ø. —É—Ä–æ–Ω –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –±—Ä–æ–Ω–µ–π)'
        comment_result = f'({result_damage - additional_damage} + {additional_damage}–¥–æ–ø.—É—Ä–æ–Ω–∞)'
    else:
        plus_additional_damage = ''
        comment_additional_damage = ''
        comment_result = ''
    
    text = f'''
‚Ñπ –í–∞—à–µ –æ—Ä—É–∂–∏–µ –∞—Ç–∞–∫–∏: {weapon}
‚Ñπ –ú–µ—Å—Ç–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è: {place}

‚Ñπ –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞:
–í—ã–ø–∞–≤—à–∏–π –Ω–∞ –∫—É–±–∞—Ö —É—Ä–æ–Ω –æ—Ä—É–∂–∏—è: {weapon_damage}
{plus_body}{x_strong_attack}{plus_additional_damage}    
‚Ñπ –ò—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–Ω: {result_damage} {comment_result}

üí¨ –ù–∞–∑–æ–≤–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è, —É—Ä–æ–Ω –∏ —Ç–∏–ø —É—Ä–æ–Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É {comment_additional_damage}
‚û° –£—Ä–æ–Ω –ø—Ä–µ–æ–¥–æ–ª–µ–ª –±—Ä–æ–Ω—é?
    '''
    
    return text

is_damage_more = Attack_question('is_damage_more', 
                                text = text_for_damage_more)

damage_failed = Attack_question(
    'damage_failed', 
    get_text_from('./questions_text/damage_failed.txt'))

damage_hit = Attack_question(
    'damage_hit', 
    get_text_from('./questions_text/damage_hit.txt'), 
    keyboard_type = Attack_question.numerical_answer)

 
resistance_or = Attack_question('resistance_or', 
                                get_text_from('./questions_text/resistance_or.txt'))
resistance_or.add_options_dict({'—Ö1/2 –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ': None,
                                '—Ö2 –í–æ—Å–ø—Ä–∏–∏–º—á–∏–≤–æ—Å—Ç—å': None,
                                '–ù–µ—Ç': None})


def text_for_damage_hurt(session_id):
    session = DB.get_attack_session(session_id)
    
    modifier_place_dict = {'1 –ì–æ–ª–æ–≤–∞': 3,
                           '2-4 –¢—É–ª–æ–≤–∏—â–µ': 1,
                           '5 –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞': 0.5,
                           '6 –õ–µ–≤–∞—è —Ä—É–∫–∞': 0.5,
                           '7-8 –ü—Ä–∞–≤–∞—è –Ω–æ–≥–∞ ': 0.5,
                           '9-10 –õ–µ–≤–∞—è –Ω–æ–≥–∞': 0.5,
                           '1 –ì–æ–ª–æ–≤–∞': 3,
                           '2-5 –¢—É–ª–æ–≤–∏—â–µ': 1,
                           '6-7 –ü—Ä–∞–≤–∞—è –∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å': 0.5,
                           '8-9 –õ–µ–≤–∞—è –∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å': 0.5,
                           '10 –•–≤–æ—Å—Ç/–∫—Ä—ã–ª–æ': 0.5,
                           '-6 –ì–æ–ª–æ–≤–∞': 3,
                           '-1 –¢—É–ª–æ–≤–∏—â–µ': 1,
                           '-3 –†—É–∫–∞/–ö–æ–Ω–µ—á–Ω–æ—Å—Ç—å': 0.5,
                           '-2 –ù–æ–≥–∞/–ö—Ä—ã–ª–æ/–•–≤–æ—Å—Ç': 0.5}
    
    resistance_or_dict = {'—Ö1/2 –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ': 0.5,
                          '—Ö2 –í–æ—Å–ø—Ä–∏–∏–º—á–∏–≤–æ—Å—Ç—å': 2,
                          '–ù–µ—Ç': 1}
    
    damage = session['damage_hit']
    
    if session['place_penalty'] == '+0 –°–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ':
        if session['place_humanoid']:
            place_field = session['place_humanoid']
        else:
            place_field = session['place_monster']
    else:
        place_field = session['place_penalty']
    place = ' '.join(place_field.split(' ')[1:])
    
    modifier_place = modifier_place_dict[place_field]
    
    resistance_or_field = session['resistance_or']
    modifier_resistance_or = resistance_or_dict[resistance_or_field]
    if resistance_or_field != '–ù–µ—Ç':
        text_modifier_resistance_or = f"{resistance_or_field.split(' ')[1]}: {resistance_or_field.split(' ')[0]}"
    else:
        text_modifier_resistance_or = ''
    
    result_damage = damage*modifier_place*modifier_resistance_or
    
    if session['is_attack_more'] == '–î–∞': finish = '‚öî –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∞—Ç–∞–∫—É'
    else: finish = '‚û° –ù–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ" —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–Ω–µ–Ω–∏—è'
    
    text = f'''
‚Ñπ –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞:
–£—Ä–æ–Ω–∞ –ø—Ä–µ–æ–¥–æ–ª–µ–ª–æ –±—Ä–æ–Ω—é: {damage}
–ú–µ—Å—Ç–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è: {place}
–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Å—Ç–∞: x{modifier_place}
{text_modifier_resistance_or} 
‚Ñπ –ù–∞–Ω–µ—Å–µ–Ω–Ω—ã–π —É—Ä–æ–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É: {result_damage}

üí¨ –ù–∞–∑–æ–≤–∏—Ç–µ –Ω–∞–Ω–µ—Å–µ–Ω–Ω—ã–π —É—Ä–æ–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É

{finish}
    '''
    return text


damage_hurt_finish = Attack_question(
    'damage_hurt_finish', 
    text = text_for_damage_hurt,
    column_name = 'is_attack_more', 
    required_value = '–î–∞')

damage_hurt = Attack_question(
    'damage_hurt', 
    text = text_for_damage_hurt)


critical_injury = Attack_question('critical_injury', 
                                get_text_from('./questions_text/critical_injury.txt'))
critical_injury.add_options_dict(
    {'12': None,
     '11': None,
     '9-10': None,
     '6-8': None,
     '4-5': None,
     '2-3': None})



def text_for_critical_description(session_id):
    session = DB.get_attack_session(session_id)
    
    is_attack_more_fielde = session['is_attack_more']
    attack_more_defense = is_attack_more_fielde[6:]
    
    critical_level_dict = {
        '–î–∞, –Ω–∞ 7-9': '–õ–µ–≥–∫–∏–π',
        '–î–∞, –Ω–∞ 10-12': '–°—Ä–µ–¥–Ω–∏–π',
        '–î–∞, –Ω–∞ 13-14': '–¢—è–∂–µ–ª—ã–π',
        '–î–∞, –Ω–∞ 15 –∏–ª–∏ –±–æ–ª—å—à–µ':'–°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π'}
    critical_level = critical_level_dict[is_attack_more_fielde]
    
    critical_injury_roll = session['critical_injury']
    
    critical_effect_name = '[—Ç—É—Ç –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞]'
    critical_effect = '[—Ç—É—Ç –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞]'
    critical_stabilization = '[—Ç—É—Ç –±—É–¥–µ—Ç –æ–ø–∏—Å–Ω–∞–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏]'
    critical_healing = '[—Ç—É—Ç –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –ª–µ—á–µ–Ω–∏—è]'
    
    text = f'''    
‚Ñπ –ê—Ç–∞–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–∞—â–∏—Ç—É –Ω–∞: {attack_more_defense}
‚Ñπ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: {critical_level}

‚Ñπ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ 2d6: {critical_injury_roll}
‚Ñπ –≠—Ñ—Ñ–µ–∫—Ç: {critical_effect_name}
{critical_effect}

‚Ñπ –ü–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏:
{critical_stabilization}

‚Ñπ –ü–æ—Å–ª–µ –ª–µ—á–µ–Ω–∏—è: 
{critical_healing}
    
üí¨ –ù–∞–∑–æ–≤–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É (–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)

[—Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –æ–ø–∏–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–Ω–µ–Ω–∏–π –∏—â–∏—Ç–µ –≤ –∫–Ω–∏–≥–µ –Ω–∞ —Å—Ç—Ä.158]
    '''
    return text


critical_description = Attack_question(
    'critical_description', 
    text = text_for_critical_description)



'''Attack tree----------------------------------------------------------------------------'''

type_of_attack.add_options_dict({'–ë–ª–∏–∂–Ω–∏–π –±–æ–π':melee_weapon, 
                                 '–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è':ranged_weapon})
melee_weapon.next_question = fast_or_hard_1

ranged_weapon.add_options_dict({'–ú–µ—Ç–∞—Ç–µ–ª—å–Ω–æ–µ': fast_or_hard_1,
                                '–õ—É–∫': fast_or_hard_2,
                                '–ê—Ä–±–∞–ª–µ—Ç': fast_or_hard_3})

fast_or_hard_1.next_question = place_penalty
fast_or_hard_2.next_question = place_penalty
fast_or_hard_3.next_question = place_penalty

place_penalty.next_question = distance

distance.next_question = mod

mod.next_question = weapon_accuracy

weapon_accuracy.next_question = effects

effects.next_question = is_attack_more

is_attack_more.add_options_dict({'–ù–µ—Ç': attack_failed,
                                 '–î–∞': body,
                                 '–î–∞, –Ω–∞ 7-9': body,
                                 '–î–∞, –Ω–∞ 10-12': body,
                                 '–î–∞, –Ω–∞ 13-14': body,
                                 '–î–∞, –Ω–∞ 15 –∏–ª–∏ –±–æ–ª—å—à–µ': body})


body.next_question = weapon_damage

weapon_damage.next_question = enemy_type

enemy_type.add_options_dict({'–ì—É–º–∞–Ω–æ–∏–¥': place_humanoid,
                             '–ú–æ–Ω—Å—Ç—Ä': place_monster})
enemy_type.next_question = is_damage_more

place_humanoid.next_question = is_damage_more

place_monster.next_question = is_damage_more

is_damage_more.add_options_dict({'–î–∞': damage_hit,
                                 '–ù–µ—Ç': damage_failed})

damage_hit.next_question = resistance_or

resistance_or.next_question = damage_hurt_finish

damage_hurt_finish.next_question = damage_hurt

damage_hurt.add_options_dict({'–î–∞–ª–µ–µ': critical_injury})

critical_injury.next_question = critical_description
